{
  "manifest": {
    "name": "libnpmpublish",
    "version": "1.1.3",
    "description": "Programmatic API for the bits behind npm publish and unpublish",
    "author": {
      "name": "Kat March√°n",
      "email": "kzm@zkat.tech"
    },
    "license": "ISC",
    "scripts": {
      "prerelease": "npm t",
      "release": "standard-version -s",
      "postrelease": "npm publish && git push --follow-tags",
      "pretest": "standard",
      "test": "tap -J --100 test/*.js",
      "update-coc": "weallbehave -o . && git add CODE_OF_CONDUCT.md && git commit -m 'docs(coc): updated CODE_OF_CONDUCT.md'",
      "update-contrib": "weallcontribute -o . && git add CONTRIBUTING.md && git commit -m 'docs(contributing): updated CONTRIBUTING.md'"
    },
    "devDependencies": {
      "bluebird": "^3.5.1",
      "nock": "^9.6.1",
      "standard": "^12.0.1",
      "standard-version": "^7.0.0",
      "tap": "^12.7.0",
      "tar-stream": "^1.6.1",
      "weallbehave": "*",
      "weallcontribute": "*"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/libnpmpublish.git"
    },
    "bugs": {
      "url": "https://github.com/npm/libnpmpublish/issues"
    },
    "homepage": "https://npmjs.com/package/libnpmpublish",
    "dependencies": {
      "aproba": "^2.0.0",
      "figgy-pudding": "^3.5.1",
      "get-stream": "^4.0.0",
      "lodash.clonedeep": "^4.5.0",
      "normalize-package-data": "^2.4.0",
      "npm-package-arg": "^6.1.0",
      "npm-registry-fetch": "^4.0.0",
      "semver": "^5.5.1",
      "ssri": "^6.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-libnpmpublish-1.1.3-e3782796722d79eef1a0a22944c117e0c4ca4280-integrity/node_modules/libnpmpublish/package.json",
    "readmeFilename": "README.md",
    "readme": "# libnpmpublish [![npm version](https://img.shields.io/npm/v/libnpmpublish.svg)](https://npm.im/libnpmpublish) [![license](https://img.shields.io/npm/l/libnpmpublish.svg)](https://npm.im/libnpmpublish) [![Travis](https://img.shields.io/travis/npm/libnpmpublish.svg)](https://travis-ci.org/npm/libnpmpublish) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/libnpmpublish?svg=true)](https://ci.appveyor.com/project/zkat/libnpmpublish) [![Coverage Status](https://coveralls.io/repos/github/npm/libnpmpublish/badge.svg?branch=latest)](https://coveralls.io/github/npm/libnpmpublish?branch=latest)\n\n[`libnpmpublish`](https://github.com/npm/libnpmpublish) is a Node.js library for\nprogrammatically publishing and unpublishing npm packages. It does not take care\nof packing tarballs from source code, but once you have a tarball, it can take\ncare of putting it up on a nice registry for you.\n\n## Example\n\n```js\nconst { publish, unpublish } = require('libnpmpublish')\n\n```\n\n## Install\n\n`$ npm install libnpmpublish`\n\n## Table of Contents\n\n* [Example](#example)\n* [Install](#install)\n* [API](#api)\n  * [publish/unpublish opts](#opts)\n  * [`publish()`](#publish)\n  * [`unpublish()`](#unpublish)\n\n### API\n\n#### <a name=\"opts\"></a> `opts` for `libnpmpublish` commands\n\n`libnpmpublish` uses [`npm-registry-fetch`](https://npm.im/npm-registry-fetch).\nMost options are passed through directly to that library, so please refer to\n[its own `opts`\ndocumentation](https://www.npmjs.com/package/npm-registry-fetch#fetch-options)\nfor options that can be passed in.\n\nA couple of options of note for those in a hurry:\n\n* `opts.token` - can be passed in and will be used as the authentication token for the registry. For other ways to pass in auth details, see the n-r-f docs.\n* `opts.Promise` - If you pass this in, the Promises returned by `libnpmpublish` commands will use this Promise class instead. For example: `{Promise: require('bluebird')}`\n\n#### <a name=\"publish\"></a> `> libpub.publish(pkgJson, tarData, [opts]) -> Promise`\n\nPublishes `tarData` to the appropriate configured registry. `pkgJson` should be\nthe parsed `package.json` for the package that is being published.\n\n`tarData` can be a Buffer, a base64-encoded string, or a binary stream of data.\nNote that publishing itself can't be streamed, so the entire stream will be\nconsumed into RAM before publishing (and are thus limited in how big they can\nbe).\n\nSince `libnpmpublish` does not generate tarballs itself, one way to build your\nown tarball for publishing is to do `npm pack` in the directory you wish to\npack. You can then `fs.createReadStream('my-proj-1.0.0.tgz')` and pass that to\n`libnpmpublish`, along with `require('./package.json')`.\n\n`publish()` does its best to emulate legacy publish logic in the standard npm\nclient, and so should generally be compatible with any registry the npm CLI has\nbeen able to publish to in the past.\n\nIf `opts.npmVersion` is passed in, it will be used as the `_npmVersion` field in\nthe outgoing packument. It's recommended you add your own user agent string in\nthere!\n\nIf `opts.algorithms` is passed in, it should be an array of hashing algorithms\nto generate `integrity` hashes for. The default is `['sha512']`, which means you\nend up with `dist.integrity = 'sha512-deadbeefbadc0ffee'`. Any algorithm\nsupported by your current node version is allowed -- npm clients that do not\nsupport those algorithms will simply ignore the unsupported hashes.\n\nIf `opts.access` is passed in, it must be one of `public` or `restricted`.\nUnscoped packages cannot be `restricted`, and the registry may agree or disagree\nwith whether you're allowed to publish a restricted package.\n\n##### Example\n\n```javascript\nconst pkg = require('./dist/package.json')\nconst tarball = fs.createReadStream('./dist/pkg-1.0.1.tgz')\nawait libpub.publish(pkg, tarball, {\n  npmVersion: 'my-pub-script@1.0.2',\n  token: 'my-auth-token-here'\n})\n// Package has been published to the npm registry.\n```\n\n#### <a name=\"unpublish\"></a> `> libpub.unpublish(spec, [opts]) -> Promise`\n\nUnpublishes `spec` from the appropriate registry. The registry in question may\nhave its own limitations on unpublishing.\n\n`spec` should be either a string, or a valid\n[`npm-package-arg`](https://npm.im/npm-package-arg) parsed spec object. For\nlegacy compatibility reasons, only `tag` and `version` specs will work as\nexpected. `range` specs will fail silently in most cases.\n\n##### Example\n\n```javascript\nawait libpub.unpublish('lodash', { token: 'i-am-the-worst'})\n//\n// `lodash` has now been unpublished, along with all its versions, and the world\n// devolves into utter chaos.\n//\n// That, or we all go home to our friends and/or family and have a nice time\n// doing nothing having to do with programming or JavaScript and realize our\n// lives are just so much happier now, and we just can't understand why we ever\n// got so into this JavaScript thing but damn did it pay well. I guess you'll\n// settle for gardening or something.\n```\n",
    "licenseText": "Copyright npm, Inc\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/libnpmpublish/-/libnpmpublish-1.1.3.tgz#e3782796722d79eef1a0a22944c117e0c4ca4280",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/libnpmpublish/-/libnpmpublish-1.1.3.tgz",
    "hash": "e3782796722d79eef1a0a22944c117e0c4ca4280",
    "integrity": "sha512-/3LsYqVc52cHXBmu26+J8Ed7sLs/hgGVFMH1mwYpL7Qaynb9RenpKqIKu0sJ130FB9PMkpMlWjlbtU8A4m7CQw==",
    "registry": "npm",
    "packageName": "libnpmpublish",
    "cacheIntegrity": "sha512-/3LsYqVc52cHXBmu26+J8Ed7sLs/hgGVFMH1mwYpL7Qaynb9RenpKqIKu0sJ130FB9PMkpMlWjlbtU8A4m7CQw== sha1-43gnlnItee7xoKIpRMEX4MTKQoA="
  },
  "registry": "npm",
  "hash": "e3782796722d79eef1a0a22944c117e0c4ca4280"
}