{
  "manifest": {
    "scripts": {
      "build": "tsc",
      "prepublish": "npm run build",
      "test": "jest"
    },
    "main": "./lib/index.js",
    "devDependencies": {
      "@types/redux-actions": "^2.3.1",
      "babel-cli": "^6.24.1",
      "babel-preset-es2015": "^6.24.1",
      "babel-preset-stage-0": "^6.24.1",
      "eslint": "^4.19.1",
      "eslint-config-airbnb-base": "^12.1.0",
      "eslint-plugin-import": "^2.11.0",
      "eslint-plugin-jest": "^21.15.0",
      "jest": "^20.0.0",
      "prettier-eslint": "^8.8.1",
      "redux": "^4.0.0",
      "redux-actions": "^2.0.2",
      "tslint-config-airbnb": "^5.9.2",
      "tslint-config-prettier": "^1.14.0",
      "typescript": "^3.0.1"
    },
    "name": "redux-pender",
    "version": "2.0.12",
    "description": "redux middleware that helps to manages async actions based on promise",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/velopert/redux-pender.git"
    },
    "keywords": [
      "redux",
      "promise"
    ],
    "author": {
      "name": "velopert",
      "email": "public.velopert@gmail.com",
      "url": "https://github.com/velopert"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/velopert/redux-actions/issues"
    },
    "files": [
      "lib"
    ],
    "homepage": "https://github.com/velopert/redux-actions#readme",
    "dependencies": {
      "proxy-polyfill": "^0.3.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-redux-pender-2.0.12-7738a9dae0de14688acfad325a3bbd8774f960cc-integrity/node_modules/redux-pender/package.json",
    "readmeFilename": "README.md",
    "readme": "# redux-pender\n\n[![Build Status](https://travis-ci.org/velopert/redux-pender.svg?branch=master)](https://travis-ci.org/velopert/redux-pender)\n[![npm version](https://img.shields.io/npm/v/redux-pender.svg)](https://badge.fury.io/js/redux-pender)\n\n## Introduction \n\nRedux pender is a middleware that helps you to manage asynchronous actions based on promise. It comes with useful tools that help you to handle this even more easier. \n\nThis library is inspired from [redux-promise-middleware](https://github.com/pburtchaell/redux-promise-middleware). The difference between redux-promise-middleware and this library is that this comes with some handy utils. Additionally, it also handles the cancellation of the promise-based action. To check out detailed comparisons between other libraries, please check [Comparisons](docs/Comparison.md) document\n\n\n## Installation\n\n``` sh\nnpm i --save redux-pender\n```\n\n## Usage\n\n### Configure Store\n\n``` javascript\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport penderMiddleware, { penderReducer } from 'redux-pender';\n\nconst reducers = {\n    /*\n        ...your other reducers...\n    */\n    pender: penderReducer\n};\n\nconst store = createStore(\n    reducers,\n    applyMiddleware(penderMiddleware())\n);\n```\n\n`penderReducer` is the reducer that tracks the status of your asynchronous actions. \n\n- When your request is pending, `store.getState().pender.pending[ACTION_NAME]` will turn true. It will set to false when it succeeds or fails.\n- When your request succeeds, `store.getState().pender.success[ACTION_NAME]` will turn true.\n- When your request fails, `store.getState().pender.failure[ACTION_NAME]` will turn true.\n\nIf you are currently using `redux-promise` or `redux-promise-middleware` in your project, there will be a collision. To avoid the collision without uninstalling existing library, pass `{ major: false }` when you initialize the middleware:\n\n```javascript\npenderMiddleware({ major: false })\n```\n\n\n\n### Actions\npender middleware will process the action when a `Promise` is given as the `payload` of the action:\n```javascript\n{\n    type: 'ACTION_TYPE',\n    payload: Promise.resolve()\n}\n```\n\nIf you have set `major` to `false` when you initialize the middleware to avoid the collision with `redux-promise` or `redux-promise-middleware`, the middleware will only accept following action:\n\n```javascript\n{\n    type: 'ACTION_TYPE',\n    payload: {\n        pend: Promise.resolve()\n    }\n}\n```\n\nBy default, middleware will accept both of the kinds of actions above.\n\n### Dispatching actions\n\nSince it supports [FSA actions](https://github.com/acdlite/flux-standard-action), you can use `createAction` of [redux-actions](https://github.com/acdlite/redux-actions).\nThe second parameter of `createAction` should be a function that returns a Promise.\n\n```javascript\nimport axios from 'axios';\nimport { createAction } from 'redux-actions';\n\nconst loadPostApi = (postId) => axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);\nconst LOAD_POST = 'LOAD_POST';\nconst loadPost = createAction(LOAD_POST, loadPostApi);\nstore.dispatch(loadPost(1));\n```\n\nIf you are using this middleware as `{major: false}`, you have to use `createPenderAction`\n\n```javascript\nimport { createPenderAction } from 'redux-pender';\nconst loadPost = createPenderAction(LOAD_POST, loadPostApi);\n```\n\nIt pretty much works quite the same, but it puts the Promise at `action.payload.pend`. \n\n### Reducer - handling actions\n\nWhen you are making your reducer, it works the best when you are using `handleActions` of [redux-actions](https://github.com/acdlite/redux-actions).\nHandling action is done by using `pender`. \n\n> For people who don't know what `handleActions` does, it handles action by creating an object, rather than a `switch`.\n\n```javascript\n\nimport { handleActions } from 'redux-actions';\nimport { pender } from 'redux-pender';\n\nconst initialState = { \n    post: {}\n}\nexport default handleActions({\n    ...pender({\n        type: LOAD_POST,\n        onSuccess: (state, action) => {\n            return {\n                post: action.payload.data\n            };\n        }\n    }),\n    // ... other action handlers...\n}, initialState);\n```\n\nDo you want to do something when the action starts or fails? It is simple.\n\n```javascript\n...pender({\n    type: LOAD_POST,\n    onPending: (state, action) => {\n        return state; // do something\n    },\n    onSuccess: (state, action) => {\n        return {\n            post: action.payload.data\n        }\n    },\n    onFailure: (state, action) => {\n        return state; // do something\n    }\n}, initialState)\n```\n\nWhen you omit one of those function, `(state, action) => state` will be the default value.\nAdditionally, it is not recommended to manage the status of request in your own reducer, because the penderReducer will do this for you. You just need to care about the result of your task in your reducer.\n\n#### applyPenders - helper function that allows you to apply penders super easily.\n\n```javascript\n\nimport { handleActions } from 'redux-actions';\nimport { pender, applyPenders } from 'redux-pender';\n\nconst initialState = { \n    post: {}\n}\n\nconst reducer = handleActions({\n    // ... some other action handlers...\n}, initialState);\n\nexport default applyPenders(reducer, [\n    {\n        type: LOAD_POST,\n        onPending: (state, action) => {\n            return state; // do something\n        },\n        onSuccess: (state, action) => {\n            return {\n                post: action.payload.data\n            }\n        },\n        onFailure: (state, action) => {\n            return state; // do something\n        }\n    }\n])\n```\n\n### Cancellation\nCancelling the promise based action is very simple in redux-pender. You just have to call `.cancel()` from the returned value of your promise based action creator.\n\n```javascript\nconst p = loadPost(1);\np.cancel();\n```\n\nWhen `cancel` is executed, redux-pender middleware will dispatch `ACTION_TYPE_CANCEL`. You can handle that action manually or configure `onCancel` in the action pender.\n\n```javascript\n...pender({\n    type: LOAD_POST,\n    onCancel: (state, action) => {\n        return state; // do something\n    }\n}, initialState)\n```\n\n### Using in your React Component\n\n```javascript\nimport React, { Component } from 'react';\nimport * as actions from './actions';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nclass Example extends Component {\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    async fetchData() {\n        const { Actions } = this.props;\n        try {\n            await Actions.loadPost(1);\n            console.log('data is fetched!');\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    render() {\n        const { loading, post } = this.props;\n\n        return (\n            <div>\n                { loading && 'Loading...' }\n                <div>\n                    <h1>{post.title}</h1>\n                    <p>{post.body}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        post: state.blog.post,\n        loading: state.pender.pending['LOAD_POST']\n    }),\n    dispatch => ({\n        Actions: bindActionCreators(actions, dispatch)\n    })\n)(Example)\n```\n\n\n## Examples\n\nAn example project of using this library is provided in [examples](examples/) directory.\nIf you want to see some more complex example, check out [do-chat](https://github.com/velopert/do-chat). It is a ChatApp project that uses firebase as backend.\n\n## Contributing\n\nContributions, questions and pull requests are all welcomed.\n\n## License\n\nCopyright (c) 2017. [Velopert](https://velopert.com/) [Licensed with The MIT License (MIT)](http://opensource.org/licenses/MIT)",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Patrick Burtchaell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/redux-pender/-/redux-pender-2.0.12.tgz#7738a9dae0de14688acfad325a3bbd8774f960cc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/redux-pender/-/redux-pender-2.0.12.tgz",
    "hash": "7738a9dae0de14688acfad325a3bbd8774f960cc",
    "integrity": "sha512-NeZOUaq1v1zpD8Ho5L9179WKWPyGayPEjUPlTYIfLaDKd1l0qZEu06VYtSGeULrzcZIKy8/LDwj70sVvcjOGEw==",
    "registry": "npm",
    "packageName": "redux-pender",
    "cacheIntegrity": "sha512-NeZOUaq1v1zpD8Ho5L9179WKWPyGayPEjUPlTYIfLaDKd1l0qZEu06VYtSGeULrzcZIKy8/LDwj70sVvcjOGEw== sha1-dzip2uDeFGiKz60yWju9h3T5YMw="
  },
  "registry": "npm",
  "hash": "7738a9dae0de14688acfad325a3bbd8774f960cc"
}